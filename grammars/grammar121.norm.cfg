
file :  external_definition
|  file external_definition


argument_expr_list :  argument_expr_list "," assignment_expr
|  assignment_expr


struct_declaration :  type_specifier_list struct_declarator_list ";"


init_declarator :  declarator "=" initializer
|  declarator


logical_or_expr :  logical_and_expr
|  logical_or_expr OR_OP logical_and_expr


initializer_list :  initializer
|  initializer_list "," initializer


multiplicative_expr :  multiplicative_expr "/" cast_expr
|  multiplicative_expr "%" cast_expr
|  multiplicative_expr "*" cast_expr
|  cast_expr


type_specifier :  TYPE_NAME
|  VOID
|  VOLATILE
|  CONST
|  DOUBLE
|  FLOAT
|  UNSIGNED
|  SIGNED
|  enum_specifier
|  LONG
|  INT
|  SHORT
|  struct_or_union_specifier
|  CHAR


logical_and_expr :  logical_and_expr AND_OP inclusive_or_expr
|  inclusive_or_expr


postfix_expr :  postfix_expr PTR_OP identifier
|  postfix_expr "(" argument_expr_list ")"
|  postfix_expr "." identifier
|  postfix_expr "[" expr "]"
|  postfix_expr DEC_OP
|  postfix_expr INC_OP
|  primary_expr
|  postfix_expr "(" ")"


parameter_identifier_list :  identifier_list
|  identifier_list "," ELIPSIS


storage_class_specifier :  REGISTER
|  AUTO
|  STATIC
|  EXTERN
|  TYPEDEF


struct_declaration_list :  struct_declaration_list struct_declaration
|  struct_declaration


parameter_type_list :  parameter_list
|  parameter_list "," ELIPSIS


expr :  expr "," assignment_expr
|  assignment_expr


inclusive_or_expr :  exclusive_or_expr
|  inclusive_or_expr "|" exclusive_or_expr


struct_or_union :  UNION
|  STRUCT


init_declarator_list :  init_declarator_list "," init_declarator
|  init_declarator


declaration_specifiers :  storage_class_specifier declaration_specifiers
|  type_specifier
|  type_specifier declaration_specifiers
|  storage_class_specifier


enum_specifier :  ENUM identifier
|  ENUM "{" enumerator_list "}"
|  ENUM identifier "{" enumerator_list "}"


exclusive_or_expr :  and_expr
|  exclusive_or_expr "^" and_expr


declaration :  declaration_specifiers init_declarator_list ";"
|  declaration_specifiers ";"


identifier :  IDENTIFIER


primary_expr :  "(" expr ")"
|  STRING_LITERAL
|  CONSTANT
|  identifier


struct_or_union_specifier :  struct_or_union "{" struct_declaration_list "}"
|  struct_or_union identifier
|  struct_or_union identifier "{" struct_declaration_list "}"


constant_expr :  conditional_expr


and_expr :  and_expr "&" equality_expr
|  equality_expr


pointer :  "*"
|  "*" pointer
|  "*" type_specifier_list
|  "*" type_specifier_list pointer


external_definition :  declaration
|  function_definition


declaration_list :  declaration_list declaration
|  declaration


abstract_declarator2 :  abstract_declarator2 "[" constant_expr "]"
|  "[" constant_expr "]"
|  "(" abstract_declarator ")"
|  abstract_declarator2 "(" ")"
|  "(" ")"
|  abstract_declarator2 "[" "]"
|  "[" "]"
|  abstract_declarator2 "(" parameter_type_list ")"
|  "(" parameter_type_list ")"


declarator2 :  declarator2 "(" parameter_identifier_list ")"
|  declarator2 "[" constant_expr "]"
|  identifier
|  declarator2 "(" ")"
|  declarator2 "[" "]"
|  declarator2 "(" parameter_type_list ")"
|  "(" declarator ")"


equality_expr :  equality_expr EQ_OP relational_expr
|  equality_expr NE_OP relational_expr
|  relational_expr


statement_list :  statement_list statement
|  statement


type_name :  type_specifier_list abstract_declarator
|  type_specifier_list


abstract_declarator :  pointer
|  abstract_declarator2
|  pointer abstract_declarator2


function_body :  declaration_list compound_statement
|  compound_statement


enumerator :  identifier "=" constant_expr
|  identifier


cast_expr :  "(" type_name ")" cast_expr
|  unary_expr


unary_operator :  "+"
|  "*"
|  "+" "+"
|  "&"
|  "!"
|  "~"
|  "-"


function_definition :  declaration_specifiers declarator function_body
|  declarator function_body


jump_statement :  GOTO identifier ";"
|  CONTINUE ";"
|  BREAK ";"
|  RETURN expr ";"
|  RETURN ";"


relational_expr :  relational_expr LE_OP shift_expr
|  shift_expr
|  relational_expr GE_OP shift_expr
|  relational_expr "<" shift_expr
|  relational_expr ">" shift_expr


parameter_declaration :  type_specifier_list declarator
|  type_name


enumerator_list :  enumerator_list "," enumerator
|  enumerator


unary_expr :  SIZEOF "(" type_name ")"
|  SIZEOF unary_expr
|  postfix_expr
|  INC_OP unary_expr
|  DEC_OP unary_expr
|  unary_operator cast_expr


iteration_statement :  FOR "(" expr ";" ";" ")" statement
|  FOR "(" ";" expr ";" expr ")" statement
|  FOR "(" ";" ";" expr ")" statement
|  DO statement WHILE "(" expr ")" ";"
|  WHILE "(" expr ")" statement
|  FOR "(" expr ";" expr ";" ")" statement
|  FOR "(" expr ";" expr ";" expr ")" statement
|  FOR "(" expr ";" ";" expr ")" statement
|  FOR "(" ";" expr ";" ")" statement
|  FOR "(" ";" ";" ")" statement


selection_statement :  SWITCH "(" expr ")" statement
|  IF "(" expr ")" statement ELSE statement


parameter_list :  parameter_declaration
|  parameter_list "," parameter_declaration


expression_statement :  expr ";"
|  ";"


shift_expr :  additive_expr
|  shift_expr LEFT_OP additive_expr
|  shift_expr RIGHT_OP additive_expr


assignment_expr :  unary_expr assignment_operator assignment_expr
|  conditional_expr


assignment_operator :  DIV_ASSIGN
|  MUL_ASSIGN
|  OR_ASSIGN
|  XOR_ASSIGN
|  AND_ASSIGN
|  RIGHT_ASSIGN
|  LEFT_ASSIGN
|  "="
|  SUB_ASSIGN
|  ADD_ASSIGN
|  MOD_ASSIGN


compound_statement :  "{" declaration_list statement_list "}"
|  "{" statement_list "}"
|  "{" "}"
|  "{" declaration_list "}"


struct_declarator :  declarator ":" constant_expr
|  ":" constant_expr
|  declarator


labeled_statement :  CASE constant_expr ":" statement
|  identifier ":" statement
|  DEFAULT ":" statement


initializer :  "{" initializer_list "," "}"
|  assignment_expr
|  "{" initializer_list "}"


struct_declarator_list :  struct_declarator_list "," struct_declarator
|  struct_declarator


additive_expr :  additive_expr "-" multiplicative_expr
|  multiplicative_expr
|  additive_expr "+" multiplicative_expr


statement :  iteration_statement
|  selection_statement
|  expression_statement
|  compound_statement
|  labeled_statement
|  jump_statement


identifier_list :  identifier_list "," identifier
|  identifier


type_specifier_list :  type_specifier
|  type_specifier_list type_specifier


declarator :  pointer declarator2
|  declarator2


conditional_expr :  logical_or_expr "?" logical_or_expr ":" conditional_expr
|  logical_or_expr


/* terminals */
RETURN : "#"
BREAK : "$"
CONTINUE : "'"
GOTO : "0"
FOR : "1"
DO : "2"
WHILE : "3"
SWITCH : "4"
ELSE : "5"
IF : "6"
DEFAULT : "7"
CASE : "8"
ELIPSIS : "9"
ENUM : "@"
UNION : "A"
STRUCT : "B"
VOID : "C"
VOLATILE : "D"
CONST : "E"
DOUBLE : "F"
FLOAT : "G"
UNSIGNED : "H"
SIGNED : "I"
LONG : "J"
INT : "K"
SHORT : "L"
CHAR : "M"
REGISTER : "N"
AUTO : "O"
STATIC : "P"
EXTERN : "Q"
TYPEDEF : "R"
TYPE_NAME : "S"
OR_ASSIGN : "T"
XOR_ASSIGN : "U"
AND_ASSIGN : "V"
RIGHT_ASSIGN : "W"
LEFT_ASSIGN : "X"
SUB_ASSIGN : "Y"
ADD_ASSIGN : "Z"
MOD_ASSIGN : "_"
DIV_ASSIGN : "`"
MUL_ASSIGN : "a"
OR_OP : "b"
AND_OP : "c"
NE_OP : "d"
EQ_OP : "e"
GE_OP : "f"
LE_OP : "g"
RIGHT_OP : "h"
LEFT_OP : "i"
DEC_OP : "j"
INC_OP : "k"
PTR_OP : "l"
SIZEOF : "m"
STRING_LITERAL : "n"
CONSTANT : "o"
IDENTIFIER : "p"
