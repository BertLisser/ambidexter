file : external_definition ;
 : file external_definition ;

jump_statement : RETURN expr CC59 ;

parameter_identifier_list : identifier_list ;
 : identifier_list CC44 ELIPSIS ;

and_expr : equality_expr ;
 : and_expr CC38 equality_expr ;

struct_or_union_specifier : Term_struct_or_union Term_identifier ;
 : Term_struct_or_union Term_identifier CC123 struct_declaration_list CC125 ;
 : Term_struct_or_union CC123 struct_declaration_list CC125 ;

compound_statement : CC123 statement_list CC125 ;
 : CC123 declaration_list statement_list CC125 ;
 : CC123 declaration_list CC125 ;

initializer_list : initializer ;
 : initializer_list CC44 initializer ;

struct_declarator : declarator ;
 : CC58 constant_expr ;
 : declarator CC58 constant_expr ;

logical_or_expr : logical_and_expr ;
 : logical_or_expr OR_OP logical_and_expr ;

equality_expr : equality_expr EQ_OP relational_expr ;
 : equality_expr NE_OP relational_expr ;
 : relational_expr ;

function_definition : declaration_specifiers declarator function_body ;
 : declarator function_body ;

declaration_specifiers : type_specifier ;
 : type_specifier declaration_specifiers ;
 : Term_storage_class_specifier ;
 : Term_storage_class_specifier declaration_specifiers ;

assignment_operator : CC61 ;

logical_and_expr : inclusive_or_expr ;
 : logical_and_expr AND_OP inclusive_or_expr ;

shift_expr : shift_expr LEFT_OP additive_expr ;
 : additive_expr ;
 : shift_expr RIGHT_OP additive_expr ;

primary_expr : Term_identifier ;
 : CC40 expr CC41 ;

struct_declaration : type_specifier_list struct_declarator_list CC59 ;

conditional_expr : logical_or_expr ;
 : logical_or_expr CC63 logical_or_expr CC58 conditional_expr ;

iteration_statement : DO statement WHILE CC40 expr CC41 CC59 ;
 : FOR CC40 expr CC59 CC59 expr CC41 statement ;
 : WHILE CC40 expr CC41 statement ;
 : FOR CC40 CC59 CC59 CC41 statement ;
 : FOR CC40 expr CC59 expr CC59 expr CC41 statement ;
 : FOR CC40 expr CC59 expr CC59 CC41 statement ;
 : FOR CC40 CC59 CC59 expr CC41 statement ;
 : FOR CC40 expr CC59 CC59 CC41 statement ;
 : FOR CC40 CC59 expr CC59 expr CC41 statement ;
 : FOR CC40 CC59 expr CC59 CC41 statement ;

relational_expr : relational_expr LE_OP shift_expr ;
 : shift_expr ;
 : relational_expr CC62 shift_expr ;
 : relational_expr GE_OP shift_expr ;
 : relational_expr CC60 shift_expr ;

additive_expr : additive_expr CC45 multiplicative_expr ;
 : additive_expr CC43 multiplicative_expr ;
 : multiplicative_expr ;

expression_statement : CC59 ;
 : expr CC59 ;

external_definition : function_definition ;
 : declaration ;

unary_expr : unary_operator cast_expr ;
 : SIZEOF unary_expr ;
 : postfix_expr ;
 : DEC_OP unary_expr ;
 : INC_OP unary_expr ;
 : SIZEOF CC40 type_name CC41 ;

abstract_declarator2 : abstract_declarator2 CC40 CC41 ;
 : abstract_declarator2 CC91 constant_expr CC93 ;
 : abstract_declarator2 CC91 CC93 ;
 : CC40 parameter_type_list CC41 ;
 : abstract_declarator2 CC40 parameter_type_list CC41 ;
 : CC40 abstract_declarator CC41 ;
 : CC91 constant_expr CC93 ;

enumerator : Term_identifier ;
 : Term_identifier CC61 constant_expr ;

labeled_statement : CASE constant_expr CC58 statement ;
 : DEFAULT CC58 statement ;
 : Term_identifier CC58 statement ;

declaration_list : declaration ;
 : declaration_list declaration ;

struct_declarator_list : struct_declarator_list CC44 struct_declarator ;
 : struct_declarator ;

enum_specifier : ENUM Term_identifier ;
 : ENUM CC123 enumerator_list CC125 ;
 : ENUM Term_identifier CC123 enumerator_list CC125 ;

init_declarator : declarator CC61 initializer ;
 : declarator ;

postfix_expr : postfix_expr CC40 CC41 ;
 : postfix_expr CC46 Term_identifier ;
 : postfix_expr PTR_OP Term_identifier ;
 : postfix_expr CC40 argument_expr_list CC41 ;
 : postfix_expr INC_OP ;
 : postfix_expr CC91 expr CC93 ;
 : primary_expr ;
 : postfix_expr DEC_OP ;

multiplicative_expr : multiplicative_expr CC37 cast_expr ;
 : cast_expr ;
 : multiplicative_expr CC47 cast_expr ;
 : multiplicative_expr CC42 cast_expr ;

inclusive_or_expr : inclusive_or_expr CC124 exclusive_or_expr ;
 : exclusive_or_expr ;

pointer : CC42 pointer ;
 : CC42 ;
 : CC42 type_specifier_list ;
 : CC42 type_specifier_list pointer ;

init_declarator_list : init_declarator_list CC44 init_declarator ;
 : init_declarator ;

selection_statement : IF CC40 expr CC41 statement ;
 : SWITCH CC40 expr CC41 statement ;
 : IF CC40 expr CC41 statement ELSE statement ;

declaration : declaration_specifiers init_declarator_list CC59 ;
 : declaration_specifiers CC59 ;

type_specifier : enum_specifier ;
 : struct_or_union_specifier ;

enumerator_list : enumerator ;
 : enumerator_list CC44 enumerator ;

cast_expr : CC40 type_name CC41 cast_expr ;
 : unary_expr ;

expr : expr CC44 assignment_expr ;
 : assignment_expr ;

parameter_list : parameter_list CC44 parameter_declaration ;
 : parameter_declaration ;

unary_operator : CC43 ;
 : CC45 ;
 : CC38 ;
 : CC42 ;

identifier_list : identifier_list CC44 Term_identifier ;
 : Term_identifier ;

declarator : pointer declarator2 ;
 : declarator2 ;

exclusive_or_expr : exclusive_or_expr CC94 and_expr ;
 : and_expr ;

type_name : type_specifier_list abstract_declarator ;
 : type_specifier_list ;

constant_expr : conditional_expr ;

statement : jump_statement ;
 : iteration_statement ;
 : selection_statement ;
 : compound_statement ;
 : expression_statement ;
 : labeled_statement ;

abstract_declarator : pointer ;
 : pointer abstract_declarator2 ;
 : abstract_declarator2 ;

statement_list : statement_list statement ;
 : statement ;

struct_declaration_list : struct_declaration_list struct_declaration ;
 : struct_declaration ;

parameter_type_list : parameter_list ;
 : parameter_list CC44 ELIPSIS ;

function_body : compound_statement ;
 : declaration_list compound_statement ;

assignment_expr : unary_expr assignment_operator assignment_expr ;
 : conditional_expr ;

argument_expr_list : argument_expr_list CC44 assignment_expr ;
 : assignment_expr ;

type_specifier_list : type_specifier ;
 : type_specifier_list type_specifier ;

parameter_declaration : type_specifier_list declarator ;
 : type_name ;

initializer : CC123 initializer_list CC44 CC125 ;
 : CC123 initializer_list CC125 ;
 : assignment_expr ;

declarator2 : declarator2 CC40 parameter_type_list CC41 ;
 : declarator2 CC40 CC41 ;
 : declarator2 CC40 parameter_identifier_list CC41 ;
 : declarator2 CC91 CC93 ;
 : Term_identifier ;
 : CC40 declarator CC41 ;
 : declarator2 CC91 constant_expr CC93 ;

/* terminals */
CC46 : "." ;
DEC_OP : "DEC_OP" ;
IF : "IF" ;
LEFT_OP : "LEFT_OP" ;
SIZEOF : "SIZEOF" ;
CC58 : ":" ;
EQ_OP : "EQ_OP" ;
CC91 : "[" ;
CC60 : "<" ;
CC124 : "|" ;
CC93 : "]" ;
WHILE : "WHILE" ;
CC62 : ">" ;
DO : "DO" ;
CC37 : "%" ;
CC41 : ")" ;
RIGHT_OP : "RIGHT_OP" ;
CC43 : "+" ;
INC_OP : "INC_OP" ;
ENUM : "ENUM" ;
CC45 : "-" ;
Term_storage_class_specifier : "Term_storage_class_specifier" ;
CC47 : "/" ;
OR_OP : "OR_OP" ;
Term_identifier : "Term_identifier" ;
ELSE : "ELSE" ;
SWITCH : "SWITCH" ;
CC59 : ";" ;
CC123 : "{" ;
PTR_OP : "PTR_OP" ;
CC125 : "}" ;
CC61 : "=" ;
RETURN : "RETURN" ;
CC94 : "^" ;
CASE : "CASE" ;
ELIPSIS : "ELIPSIS" ;
CC63 : "?" ;
Term_struct_or_union : "Term_struct_or_union" ;
FOR : "FOR" ;
NE_OP : "NE_OP" ;
AND_OP : "AND_OP" ;
CC38 : "&" ;
LE_OP : "LE_OP" ;
CC40 : "(" ;
CC42 : "*" ;
CC44 : "," ;
GE_OP : "GE_OP" ;
DEFAULT : "DEFAULT" ;
