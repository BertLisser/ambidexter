%%
%% Initializers.sdf:
%% this file is a part of CxxGrammar from the Transformers project.
%% Copyright (C) 2004 EPITA Research and Development Laboratory.
%%
%% This program is free software; you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%%
module Initializers

imports

  AssignmentExpressions
  PostfixExpressions

exports

  sorts
    InitializerClause
    InitializerList

exports

  sorts
    Initializer

  context-free syntax

    %% If there is an initializer, we assume that the declarator refer to a
    %% new object-name
    Initializer -> Initializer?
                -> Initializer?

    %% 8.5 [dcl.init]
    "=" InitializerClause  -> Initializer
    "(" ExpressionList ")" -> Initializer

    %% 8.5 [dcl.init]
    AssignmentExpression               -> InitializerClause
    "{" InitializerList comma:","? "}" -> InitializerClause

    "{" "}"                            -> InitializerClause

    %% 8.5 [dcl.init]
    list:{ InitializerClause "," }+    -> InitializerList
