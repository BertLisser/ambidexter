%%
%% UnaryExpressions.sdf:
%% this file is a part of CxxGrammar from the Transformers project.
%% Copyright (C) 2004 EPITA Research and Development Laboratory.
%%
%% This program is free software; you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%%
module UnaryExpressions

imports

  CastExpressions
  DeleteExpressions
  NewExpressions
  PostfixExpressions

exports

  sorts
    UnaryOperator

exports

  sorts
    UnaryExpression

  context-free syntax

    %% 5.3 [expr.unary]
    PostfixExpression            -> UnaryExpression
    "++" CastExpression          -> UnaryExpression
    "--" CastExpression          -> UnaryExpression
    UnaryOperator CastExpression -> UnaryExpression
    "sizeof" UnaryExpression     -> UnaryExpression
    "sizeof" "(" TypeId ")"      -> UnaryExpression
    NewExpression                -> UnaryExpression
    DeleteExpression             -> UnaryExpression

    %% 5.3 [expr.unary]
    "*" -> UnaryOperator	{cons("Indirection")}
    "&" -> UnaryOperator	{cons("Address")}
    "+" -> UnaryOperator	{cons("Pos")}
    "-" -> UnaryOperator	{cons("Neg")}
    "!" -> UnaryOperator	{cons("LogicalNot")}
    "not" -> UnaryOperator      {cons("LogicalNot")}
    "~" -> UnaryOperator	{cons("BinaryNot")}
    "compl" -> UnaryOperator    {cons("BinaryNot")}
