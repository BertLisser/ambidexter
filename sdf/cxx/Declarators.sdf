%%
%% Declarators.sdf:
%% this file is a part of CxxGrammar from the Transformers project.
%% Copyright (C) 2004, 2005 EPITA Research and Development Laboratory.
%%
%% This program is free software; you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%%
module Declarators

imports

  ConstantExpressions
  CvQualifiers
  ExceptionSpecifications
  IdExpressions
  ParameterDeclarations
  SimpleTypeSpecifiers

exports

  sorts
    DirectDeclarator
    DeclaratorId

exports

  sorts
    Declarator
    PtrOperator

  context-free syntax

    %% 8 [dcl.decl]
    DirectDeclarator       -> Declarator

    PtrOperator Declarator -> Declarator

    %% 8 [dcl.decl]
    DeclaratorId                                             -> DirectDeclarator


    DirectDeclarator "(" ParameterDeclarationClause ")"
    cqs:CvQualifierSeq? es:ExceptionSpecification?           -> DirectDeclarator

    DirectDeclarator "[" ce:ConstantExpression? "]"
                                                             -> DirectDeclarator

    "(" Declarator ")"
                                                             -> DirectDeclarator


    %% 8 [dcl.decl]
    "*" cqs:CvQualifierSeq?                                -> PtrOperator

    CvQualifierSeq -> CvQualifierSeq?

    -> CvQualifierSeq?

    "&"                                                    -> PtrOperator


    r:Root NestedNameSpecifier "*" cvs:CvQualifierSeq? -> PtrOperator

    %% 8 [dcl.decl]
    IdExpression                                 -> DeclaratorId

    Root nns:NestedNameSpecifier? TypeName     -> DeclaratorId

    %%FIXME: In sdf-attribute, root.ok should be a local even if all rules
    %%       define it. But for the moment we declare an dummy rule without
    %%       root.ok.
    "buggy" -> DeclaratorId {avoid}
