module ECMAScript-All
imports
ECMAScript

exports
context-free start-symbols

Program
Keyword
ReservedWord
NullLiteral
BooleanLiteral
FutureReservedWord
"instanceof" | "typeof"
"do"       | "instanceof" | "typeof"
"try"
    | "do"       | "instanceof" | "typeof"
"in"         | "try"
    | "do"       | "instanceof" | "typeof"
"delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"case"     | "finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"var"
    | "case"     | "finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"new"    | "var"
    | "case"     | "finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"else"       | "new"    | "var"
    | "case"     | "finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"break"    | "else"       | "new"    | "var"
    | "case"     | "finally"    | "return" | "void"
    | "catch"    | "for"        | "switch" | "while"
    | "continue" | "function"   | "this"   | "with"
    | "default"  | "if"         | "throw"
    | "delete"   | "in"         | "try"
    | "do"       | "instanceof" | "typeof"
"import"     | "public"
"double"   | "import"     | "public"
"volatile"
    | "double"   | "import"     | "public"
"protected" | "volatile"
    | "double"   | "import"     | "public"
"implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"boolean"  | "export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"short"
    | "boolean"  | "export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"int"       | "short"
    | "boolean"  | "export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"enum"       | "int"       | "short"
    | "boolean"  | "export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
"abstract" | "enum"       | "int"       | "short"
    | "boolean"  | "export"     | "interface" | "static"
    | "byte"     | "extends"    | "long"      | "super"
    | "char"     | "final"      | "native"    | "synchronized"
    | "class"    | "float"      | "package"   | "throws"
    | "const"    | "goto"       | "private"   | "transient"
    | "debugger" | "implements" | "protected" | "volatile"
    | "double"   | "import"     | "public"
FutureReservedKeyword
Ctx
Block
<Block-CF>
Stm[[Ctx]]
<Stm[[Ctx]]-CF>
EmptyStm
<EmptyStm-CF>
IfStm[[Ctx]]
<IfStm[[Ctx]]-CF>
IterationStm[[Ctx]]
<IterationStm[[Ctx]]-CF>
WithStm[[Ctx]]
<WithStm[[Ctx]]-CF>
LabelledStm[[Ctx]]
<LabelledStm[[Ctx]]-CF>
SwitchStm
<SwitchStm-CF>
TryStm
<TryStm-CF>
ExprStm
<ExprStm-CF>
WhiteSpace
<WhiteSpace-CF>
<WhiteSpace-CF>*
StmTerminator
ContinueStm
<ContinueStm-CF>
BreakStm
<BreakStm-CF>
ReturnStm
<ReturnStm-CF>
ThrowStm
<ThrowStm-CF>
VarStm
<VarStm-CF>
NotTerminatedStm[[Ctx]]
<NotTerminatedStm[[Ctx]]-CF>
LineTerminator
<LineTerminator-CF>
StmList
StmList?
Full
Stm[[Full]]
Stm[[Full]]*
StmListPrefix
<StmListPrefix-CF>
LAYOUT
LAYOUT?
<LAYOUT?-CF>
NotTerminatedStm[[Full]]
<NotTerminatedStm[[Full]]-CF>
(<WhiteSpace-CF>* ";")
(<WhiteSpace-CF>* ";")?
<StmList-CF>
AllowIn
VarDec[[AllowIn]]
{VarDec[[AllowIn]] ","}+
Id
Initialiser[[Ctx]]
Initialiser[[Ctx]]?
VarDec[[Ctx]]
AssignmentExpr[[Ctx]]
Expr[[AllowIn]]
Expr
NoShortIf
Stm[[NoShortIf]]
DoStm
WhileStm[[Ctx]]
ForStm[[Ctx]]
Stm
ForInit
ForInit?
Expr?
NoIn
Expr[[NoIn]]
VarDecList[[NoIn]]
ForInBinding
LeftHandSideExpr
VarDec[[NoIn]]
<Id-CF>
<Id-CF>?
<Expr-CF>
<Expr-CF>?
WithStm
CaseClause
CaseClause*
LabelledStm
Catch
Finally
TryStam
Finallly
SourceElements
SourceElement
FunctionDec
SourceElement*
SourceElementsPrefix
FinalSourceElement
<FunctionDec-CF>
<SourceElementsPrefix-CF>
<SourceElements-CF>
FormalParam
{FormalParam ","}*
FunctionBody
Id?
FunctionExpr
PrimaryExpr
Literal
ArrayLiteral
ObjectLiteral
Elision
Elision?
ElementList
LiteralElement
AssignmentExpr[[AllowIn]]
","+
ProperyNameAndValue
{ProperyNameAndValue ","}*
PropertyName
Identifier
StringLiteral
NumericLiteral
MemberExpr
Arguments
NewExpr
CallExpr
{AssignmentExpr[[AllowIn]] ","}+
PostfixExpr
UnaryExpr
MulExpr
AddExpr
ShiftExpr
RelExpr[[Ctx]]
RelExpr[[AllowIn]]
EqExpr[[Ctx]]
BitwiseAndExpr[[Ctx]]
BitwiseXorExpr[[Ctx]]
BitwiseOrExpr[[Ctx]]
LogicalAndExpr[[Ctx]]
LogicalOrExpr[[Ctx]]
ConditionalExpr[[Ctx]]
CompoundAssignment
Expr[[Ctx]]
OptionalExpr
IdentifierName
IdentifierStart
IdentifierPart
IdentifierPart*
UnicodeLetter
UnicodeEscapeSequence
UnicodeDigit
UnicodeConnectorPunctuation
DecimalLiteral
HexIntegerLiteral
DecimalIntLiteral
[0-9]*
ExponentPart
ExponentPart?
[0-9]+
SignedInteger
HexDigit
HexDigit+
DoubleStringCharacters
SingleStringCharacters
RegularExpressionBody
RegularExpressionFlags
RegularExpressionLiteral

LayoutDummy

context-free syntax

EmptyDummy EmptyDummy -> LayoutDummy
-> EmptyDummy
