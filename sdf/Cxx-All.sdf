module Cxx-All

imports Cxx

exports
context-free start-symbols

TranslationUnit
Operator
OperatorFunctionId
TemplateArgumentList
TemplateArgumentList?
tal:TemplateArgumentList?
CastExpression
UnaryExpression
TypeId
FunctionSpecifier
DirectDeclarator
DeclaratorId
Declarator
PtrOperator
ParameterDeclarationClause
CvQualifierSeq
CvQualifierSeq?
cqs:CvQualifierSeq?
ExceptionSpecification
ExceptionSpecification?
es:ExceptionSpecification?
ConstantExpression
ConstantExpression?
ce:ConstantExpression?
Root
r:Root
NestedNameSpecifier
cvs:CvQualifierSeq?
IdExpression
NestedNameSpecifier?
nns:NestedNameSpecifier?
TypeName
TypeParameter
TemplateParameter
ParameterDeclaration
Identifier
Identifier?
i:Identifier?
TemplateParameterList
DeclarationStatement
BlockDeclaration
PmExpression
ThrowExpression
AssignmentExpression
AssignmentExpression?
InclusiveOrExpression
ExclusiveOrExpression
StatementSeq
CompoundStatement
StatementSeq?
ss:StatementSeq?
Statement
Statement+
NewPlacement
NewTypeId
NewDeclarator
DirectNewDeclarator
NewInitializer
NewExpression
"::"?
root:"::"?
NewPlacement?
np:NewPlacement?
NewInitializer?
ni:NewInitializer?
ExpressionList
TypeSpecifierSeq
NewDeclarator?
nd:NewDeclarator?
Expression
ExpressionList?
el:ExpressionList?
ForInitStatement
IterationStatement
Condition
Condition?
cond:Condition?
Expression?
expr:Expression?
ExpressionStatement
SimpleDeclaration
ExtensionNamespaceDefinition
UnnamedNamespaceDefinition
OriginalNamespaceDefinition
OriginalNamespaceName
NamespaceBody
NamespaceName
NamespaceDefinition
NamedNamespaceDefinition
NamespaceAlias
org:OriginalNamespaceName
DeclarationSeq
DeclarationSeq?
SelectionStatement
st1:Statement
st2:Statement
InitializerClause
InitializerList
Initializer
Initializer?
","?
comma:","?
{ InitializerClause "," }+
list:{ InitializerClause "," }+
MemberDeclarator
MemberDeclaratorList
ConstantInitializer
PureSpecifier
MemberSpecification
MemberDeclaration
MemberSpecification?
ms:MemberSpecification?
AccessSpecifier
DeclSpecifierSeq
DeclSpecifierSeq?
ds:DeclSpecifierSeq?
MemberDeclaratorList?
mdl:MemberDeclaratorList?
FunctionDefinition
";"?
semi:";"?
nns:NestedNameSpecifier
"template"?
template:"template"?
UnqualifiedId
UsingDeclaration
TemplateDeclaration
{ MemberDeclarator ","}+
list:{ MemberDeclarator ","}+
l1:{ MemberDeclarator "," }+
l2:{ MemberDeclarator "," }+
l:{MemberDeclarator ","}+
{MemberDeclarator ","}*
SIMPLE-ESCAPE-SEQUENCE
OCTAL-ESCAPE-SEQUENCE
OCTAL-ESCAPE-SEQUENCE1
OCTAL-ESCAPE-SEQUENCE2
OCTAL-ESCAPE-SEQUENCE3
OCTAL-ESCAPE-SEQUENCE4
HEXADECIMAL-ESCAPE-SEQUENCE
HEX-QUAD
ESCAPE-SEQUENCE
UNIVERSAL-CHARACTER-NAME
OCTAL-DIGIT
LOW-OCTAL-DIGIT
HIGH-OCTAL-DIGIT
HEXADECIMAL-DIGIT
HEXADECIMAL-DIGIT+
"export"?
exp:"export"?
Declaration
{ TemplateParameter "," }+
list:{ TemplateParameter "," }+
LogicalOrExpression
LogicalAndExpression
INTEGER-LITERAL
DECIMAL-LITERAL
OCTAL-LITERAL
HEXADECIMAL-LITERAL
INTEGER-SUFFIX
UNSIGNED-SUFFIX
LONG-SUFFIX
IntegerLiteral
INTEGER-SUFFIX?
NONZERO-DIGIT
DIGIT
DIGIT*
OCTAL-DIGIT*
HEXADECIMAL-DIGIT*
LONG-SUFFIX?
UNSIGNED-SUFFIX?
TemplateName
TemplateArgument
TemplateId
{ TemplateArgument "," }+
list:{ TemplateArgument "," }+
l:{ TemplateArgument "," }+
r:{ TemplateArgument "," }+
{TemplateArgument ","}*
AssignmentOperator
ConditionalExpression
UsingDirective
DeleteExpression
InitDeclarator
InitDeclaratorList
InitDeclaratorList?
{ InitDeclarator "," }+
list:{ InitDeclarator "," }+
l1:{ InitDeclarator "," }+
l2:{ InitDeclarator "," }+
l:{InitDeclarator ","}+
{InitDeclarator ","}*
init:Initializer?
DeclSpecifier
StorageClassSpecifier
TypeSpecifier
DeclSpecifier+
list:DeclSpecifier+
l:DeclSpecifier+
r:DeclSpecifier+
DeclSpecifier*
ElaboratedTypeSpecifier
ClassKey
EqualityExpression
RelationalExpression
LinkageSpecification
StringLiteral
ds:DeclarationSeq?
MemInitializerList
MemInitializerId
CtorInitializer
MemInitializer
{ MemInitializer "," }+
list:{ MemInitializer "," }+
ClassName
EnumeratorList
EnumeratorDefinition
EnumName
EnumSpecifier
Enumerator
EnumeratorList?
el:EnumeratorList?
{ EnumeratorDefinition "," }+
list:{ EnumeratorDefinition "," }+
AndExpression
STRING-LITERAL
S-CHAR
S-CHAR-SEQUENCE
S-CHAR-SEQUENCE?
S-CHAR+
S-SOURCE-CHARACTER
UnaryOperator
PostfixExpression
JumpStatement
exp:Expression?
id:Identifier
LabeledStatement
TryBlock
SimpleTypeSpecifier
ClassSpecifier
CvQualifier
ASTERISK
LAYOUT
~[\n]*
~[\*]|ASTERISK
~[\*]|ASTERISK*
LAYOUT?
AsmDefinition
BOOLEAN-LITERAL
BooleanLiteral
"typename"?
tn:"typename"?
PrimaryExpression
Literal
ShiftExpression
AdditiveExpression
{ AssignmentExpression "," }+
list:{ AssignmentExpression "," }+
Declaration+
seq:Declaration+
ExplicitInstantiation
ExplicitSpecialization
NamespaceAliasDefinition
idl:InitDeclaratorList?
TypedefName
FunctionBody
dss:DeclSpecifierSeq?
CtorInitializer?
ci:CtorInitializer?
FunctionTryBlock
CharacterLiteral
FloatingLiteral
ClassOrNamespaceName
QualifiedId
ConversionFunctionId
NON-DIGIT
SOURCE-CHARACTER
C-SOURCE-CHARACTER
QualifiedNamespaceSpecifier
DirectAbstractDeclarator
AbstractDeclarator
AbstractDeclarator?
ad:AbstractDeclarator?
TypeSpecifier+
ts:TypeSpecifier+
l:TypeSpecifier+
r:TypeSpecifier+
TypeSpecifier*
ad:AbstractDeclarator
DirectAbstractDeclarator?
dad:DirectAbstractDeclarator?
TypeIdList
TypeIdList?
til:TypeIdList?
{ TypeId "," }+
list:{ TypeId "," }+
l:{TypeId ","}+
r:{TypeId ","}+
{TypeId ","}*
BaseSpecifierList
BaseSpecifier
BaseClause
BaseClause?
{ BaseSpecifier "," }+
list:{ BaseSpecifier "," }+
AccessSpecifier?
as:AccessSpecifier?
"virtual"?
virt:"virtual"?
MultiplicativeExpression
FLOATING-LITERAL
FRACTIONAL-CONSTANT
EXPONENT-PART
SIGN
FLOATING-SUFFIX
EXPONENT-PART?
FLOATING-SUFFIX?
DIGIT+
SIGN?
ParameterDeclarationList
ParameterDeclarationList?
pdl:ParameterDeclarationList?
"..."?
etc:"..."?
{ ParameterDeclaration "," }+
list:{ ParameterDeclaration "," }+
l:{ParameterDeclaration ","}+
r:{ParameterDeclaration ","}+
{ParameterDeclaration ","}*
CHARACTER-LITERAL
C-CHAR-SEQUENCE
C-CHAR
C-CHAR+
PseudoDestructorName
HandlerSeq
Handler
ExceptionDeclaration
Handler+
ClassHead
bc:BaseClause?
ns:NestedNameSpecifier?
CvQualifier+
cqs:CvQualifier+
CvQualifier*
l:CvQualifier+
r:CvQualifier+
ConversionTypeId
ConversionDeclarator
ConversionDeclarator?
cd:ConversionDeclarator?
ID
NON-DIGIT|DIGIT
NON-DIGIT|DIGIT*

LayoutDummy

context-free syntax

EmptyDummy EmptyDummy -> LayoutDummy
-> EmptyDummy
