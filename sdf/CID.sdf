module CID

exports

sorts Identifier AnonymousIdentifier Keyword

context-free start-symbols
Declaration


context-free syntax
Specifier+ {InitDeclarator ","}+ ";" -> Declaration

context-free syntax
Declarator                 -> InitDeclarator
Identifier                 -> Declarator

context-free syntax
Identifier		-> Specifier 

"typedef"		-> Specifier
"extern"			-> Specifier
"static"			-> Specifier
"auto"			-> Specifier
"register"		-> Specifier
"void"			-> Specifier
"char" 			-> Specifier
"short" 			-> Specifier
"int" 			-> Specifier
"long"			-> Specifier
"float" 			-> Specifier
"double"			-> Specifier
"signed"			-> Specifier
"unsigned" 		-> Specifier
"const"    		-> Specifier
"volatile" 		-> Specifier


lexical syntax

"auto"			|
"break"			|
"case"			|
"char"			|
"const"			|
"continue"		|
"default"		|
"do"			|
"double"		|
"else"			|
"enum"			|
"extern"		|
"float"			|
"for"			|
"goto"			|
"if"			|
"int"			|
"long"		  	|
"register"		|
"return"		|
"short"			|
"signed"		|
"sizeof"		|
"static"		|
"struct"		|
"switch"		|
"typedef"		|
"union"			|
"unsigned"		|
"void"			|
"volatile"		|
"while"			-> Keyword

Keyword -> Identifier {reject}

lexical syntax

[a-zA-Z\_][a-zA-Z\_0-9]* -> Identifier

lexical restrictions

Identifier -/- [0-9a-zA-Z\_] 
 

lexical syntax

[\ \t\n\r\11\12] -> LAYOUT

context-free restrictions

LAYOUT? -/- [\ \t\n\r\11\12]